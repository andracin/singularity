{# Admin view template #}
{# harveybc 20171014 #}
{# Includes the master_AdminLTE template containing AdminLTE #}
{% extends 'master_AdminLTE' %}{% block content %}
    <style>
        .box-info{
            margin-bottom:10px;
        }
        .form-group{
            margin-bottom:10px;
        }
    </style>
    <!-- form start -->
    <form class="form-horizontal">
        <a class="btn btn-success" style="position:relative;top:-5px; padding-top:3px; padding-bottom: 3px;" href="/authentication/update/{{user_id}}?username={{username}}&pass_hash={{pass_hash}}&process_hash={{process_hash}}"><span class="glyphicon glyphicon-edit"></span> Edit User</a>
<div class="box box-info">
    <div class="box-header with-border">
        <h3 class="box-title">User Metadata</h3>
    </div>
    <!-- /.box-header 
    TODO: CARGAR VALORES DESDE PARAMS
    -->
    <div class="box-body">
        <div class="form-group">
            <label for="inputUserName" class="col-sm-2 control-label">UserName</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="inputUserName" name="user_name">
            </div>
        </div>
        <div class="form-group">
            <label for="inputName" class="col-sm-2 control-label">Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="inputName" name="name">
            </div>
        </div>
        <div class="form-group">
            <label for="inputCreatorKey" class="col-sm-2 control-label">Creator Key</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="inputPublicKey"  name="creator_key" placeholder="Creator Key">
            </div>
        </div>                
        <div class="form-group">
            <label for="passHash" class="col-sm-2 control-label">Pass Hash</label>

            <div class="col-sm-10">
                <input type="text" class="form-control" id="passHash"  name="passhash" placeholder="Pass Hash">
            </div>
        </div>
        <div class="form-group">
            <label for="maxConnections"  class="col-sm-2 control-label">maxConnections</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="maxConnections"  name="max_connections">
            </div>
        </div>                
        <div class="form-group">
            <label for="maxNeighbors"  class="col-sm-2 control-label">maxNeighbors</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="maxNeighbors"  name="max_neighbors">
            </div>
        </div>                
        <div class="form-group">
            <label for="maxTtl"  class="col-sm-2 control-label">Max.TTL</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="maxTtl"  name="max_ttl">
            </div>
        </div>
    </div>
</div>
<div class="box box-info">
    <div class="box-header with-border">
        <h3 class="box-title">User Control</h3>
    </div>
    <!-- /.box-header -->
    <div class="box-body">
        <div class="form-group">
            <label for="inputActive" class="col-sm-2 control-label">Active</label>
            <div class="col-sm-10">
                <input type="checkbox" class="checkbox" id="inputActive" name="active" checked>
            </div>
        </div>                
        <!-- /.box-footer -->
    </div>
</div>


    </form>
{% endblock %}
{% block footer %}
    <div id="helpModal" class="modal fade" role="dialog" >
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Authentication Detail View Help</h4>
                </div>
                <div class="modal-body">
                    <p>This view allows to view the user details with a real-time graphic of reported performances and block generation difficulty.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div> 
    <!-- End Modal Help Dialog -->
    <!-- FastClick -->
    <script src="/bower_components/fastclick/lib/fastclick.js"></script>
    <!-- FLOT CHARTS -->
    <script src="/bower_components/Flot/jquery.flot.js"></script>
    <!-- FLOT RESIZE PLUGIN - allows the chart to redraw when the window is resized -->
    <script src="/bower_components/Flot/jquery.flot.resize.js"></script>
    <script>
        // Gets data from controller
        var data = {{data| dump | safe}};
                // when page finishes loading, sets the values to the ones from data
                $(document).ready(function () {
            // Shows Help When button clicked
            $('#btn-trig').click(function () {
                $('#helpModal').modal('show');
            });
            // Initialize values of form
            // Metadata
            $('#inputName').val(data[0].name);
            $('#inputUserName').val(data[0].username);
            $('#inputCreatorKey').val(data[0].creator_key);
            $('#passHash').val(data[0].pass_hash);
            $('#appId').val(data[0].app_hash);
            $('#maxConnections').val(data[0].max_connections);
            $('#maxNeighbors').val(data[0].max_neighbors);
            $('#maxTtl').val(data[0].max_ttl);
            // Control
            $('#inputActive').val(data[0].active);

        });
        $(function () {
            /*
             * Flot Interactive Chart
             * -----------------------
             */
            // We use an inline data source in the example, usually data would
            // be fetched from a server
            var data = [], totalPoints = 100
            function getRandomData() {
                if (data.length > 0)
                    data = data.slice(1)
                // Do a random walk
                while (data.length < totalPoints) {

                    var prev = data.length > 0 ? data[data.length - 1] : 50,
                            y = prev + Math.random() * 10 - 5

                    if (y < 0) {
                        y = 0
                    } else if (y > 100) {
                        y = 100
                    }

                    data.push(y)
                }
                // Zip the generated y values with the x values
                var res = []
                for (var i = 0; i < data.length; ++i) {
                    res.push([i, data[i]])
                }

                return res
            }
            var interactive_plot = $.plot('#interactive', [getRandomData()], {
                grid: {
                    borderColor: '#f3f3f3',
                    borderWidth: 1,
                    tickColor: '#f3f3f3'
                },
                series: {
                    shadowSize: 0, // Drawing is faster without shadows
                    color: '#3c8dbc'
                },
                lines: {
                    fill: true, //Converts the line chart to area chart
                    color: '#3c8dbc'
                },
                yaxis: {
                    min: 0,
                    max: 100,
                    show: true
                },
                xaxis: {
                    show: true
                }
            })
            var updateInterval = 1000 //Fetch data ever x milliseconds
            var realtime = 'on' //If == to on then fetch data every x seconds. else stop fetching
            function update() {
                interactive_plot.setData([getRandomData()])
                // Since the axes don't change, we don't need to call plot.setupGrid()
                interactive_plot.draw()
                if (realtime === 'on')
                    setTimeout(update, updateInterval)
            }
            //INITIALIZE REALTIME DATA FETCHING
            if (realtime === 'on') {
                update()
            }
            //REALTIME TOGGLE
            $('#realtime .btn').click(function () {
                if ($(this).data('toggle') === 'on') {
                    realtime = 'on'
                } else {
                    realtime = 'off'
                }
                update()
            })
            /*
             * END INTERACTIVE CHART
             */
            /*
             * LINE CHART
             * ----------
             */
            //LINE randomly generated data
            var sin = [], cos = []
            for (var i = 0; i < 14; i += 0.5) {
                sin.push([i, Math.sin(i)])
                cos.push([i, Math.cos(i)])
            }
            var line_data1 = {
                data: sin,
                color: '#3c8dbc'
            }
            var line_data2 = {
                data: cos,
                color: '#00c0ef'
            }
            $.plot('#line-chart', [line_data1, line_data2], {
                grid: {
                    hoverable: true,
                    borderColor: '#f3f3f3',
                    borderWidth: 1,
                    tickColor: '#f3f3f3'
                },
                series: {
                    shadowSize: 0,
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                lines: {
                    fill: false,
                    color: ['#3c8dbc', '#f56954']
                },
                yaxis: {
                    show: true
                },
                xaxis: {
                    show: true
                }
            })
            //Initialize tooltip on hover
            $('<div class="tooltip-inner" id="line-chart-tooltip"></div>').css({
                position: 'absolute',
                display: 'none',
                opacity: 0.8
            }).appendTo('body')
            $('#line-chart').bind('plothover', function (event, pos, item) {
                if (item) {
                    var x = item.datapoint[0].toFixed(2),
                            y = item.datapoint[1].toFixed(2)

                    $('#line-chart-tooltip').html(item.series.label + ' of ' + x + ' = ' + y)
                            .css({top: item.pageY + 5, left: item.pageX + 5})
                            .fadeIn(200)
                } else {
                    $('#line-chart-tooltip').hide()
                }
            })
            /* END LINE CHART */
        })
        /*
         * Custom Label formatter
         * ----------------------
         */
        function labelFormatter(label, series) {
            return '<div style="font-size:13px; text-align:center; padding:2px; color: #fff; font-weight: 600;">'
                    + label
                    + '<br>'
                    + Math.round(series.percent) + '%</div>'
        }
    </script>
{% endblock %}
